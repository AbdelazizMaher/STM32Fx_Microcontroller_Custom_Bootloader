/* USER CODE BEGIN Header */
/**
 ******************************************************************************
 * @file           : main.h
 * @brief          : Header for main.c file.
 *                   This file contains the common defines of the application.
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */
/* USER CODE END Header */

/* Define to prevent recursive inclusion -------------------------------------*/
#ifndef __MAIN_H
#define __MAIN_H

#ifdef __cplusplus
extern "C" {
#endif


/* Private includes ----------------------------------------------------------*/
#include <stdio.h>
#include <string.h>
#include <stdarg.h>

/* Includes ------------------------------------------------------------------*/
#include "stm32f4xx_hal.h"

/* Exported types ------------------------------------------------------------*/

//CRC Status
typedef enum
{
	VERIFY_CRC_FAIL,
	VERIFY_CRC_SUCCESS
}CRC_CheckStatus;


typedef enum
{
	ADDR_INVALID,
	ADDR_VALID
}Addr_CheckValid;

/* Exported constants --------------------------------------------------------*/


/* Exported macro ------------------------------------------------------------*/
#define BL_DEBUG_MSG_EN

#define A0_GPIO_Port                    GPIOA
#define A0_Pin                		    GPIO_PIN_0

#define FLASH_SECTOR2_BASEADDR  		0x08008000U

// Some Start and End addresses of different memories of STM32F407xx MCU
#define SRAM1_SIZE                      (112*1024)                    // STM32F407xx has 112KB of SRAM1
#define SRAM1_END                       (SRAM1_BASE + SRAM1_SIZE)

#define SRAM2_SIZE                      (16*1024)                     // STM32F407xx has 16KB of SRAM2
#define SRAM2_END                       (SRAM2_BASE + SRAM2_SIZE)

#define BKPSRAM_SIZE                    (4*1024)                      // STM32F407xx has 4KB of SRAM2
#define BKPSRAM_END                     (BKPSRAM_BASE + BKPSRAM_SIZE)

// ACK and NACK bytes
#define BL_ACK   0XA5
#define BL_NACK  0X7F

/* Exported functions prototypes ---------------------------------------------*/
void Error_Handler(void);
void Bootloader_ReadData(void);
void Bootloader_JumpTo_UserApp(void);

void Bootloader_Handle_GetVer_Cmd(uint8_t *pBuffer);
void Bootloader_Handle_GetHelp_Cmd(uint8_t *pBuffer);
void Bootloader_Handle_GetCid_Cmd(uint8_t *pBuffer);
void Bootloader_Handle_GetRdp_Cmd(uint8_t *pBuffer);
void Bootloader_Handle_GoToAddr_Cmd(uint8_t *pBuffer);
void Bootloader_Handle_FlashErase_Cmd(uint8_t *pBuffer);
void Bootloader_Handle_MemWrite_Cmd(uint8_t *pBuffer);
void Bootloader_Handle_EnRW_Protect_Cmd(uint8_t *pBuffer);
void Bootloader_Handle_MemRead_Cmd(uint8_t *pBuffer);
void Bootloader_Handle_ReadSector_ProtectionStatus_Cmd(uint8_t *pBuffer);
void Bootloader_Handle_ReadOtp_Cmd(uint8_t *pBuffer);
void Bootloader_Handle_DisRW_Protect_Cmd(uint8_t *pBuffer);

void Bootloader_Uart_SendReply(uint8_t *pBuffer,uint32_t Len);

void Bootloader_Uart_SendACK(uint8_t Follow_DataLen);
void Bootloader_Uart_SendNACK(void);

CRC_CheckStatus Bootloader_VerifyCRC(uint8_t *pData, uint32_t len, uint32_t crc_host);

uint8_t Bootloader_GetVer(void);
uint16_t Bootloader_MCU_GetChipID(void);
uint8_t Bootloader_MCU_GetFlash_RdpLevel(void);

/* Private defines -----------------------------------------------------------*/
//version 1.0
#define BL_VERSION 0x10

/************************ Our Bootloader Commands ************************/

//#define <Command Name >	      <Command_Code>

//This Command is used to read the Bootloader Version from the MCU
#define    BL_GET_VER				   0x51
//This Command is used to Know what are the Commands Supported by the Bootloader
#define    BL_GET_HELP				   0x52
//This Command is used to Read the MCU Chip Identification number
#define    BL_GET_CID				   0x53
//This Command is used to Read the Flash Read Protection level.
#define    BL_GET_RDP_STATUS		   0x54
//This Command is used to Jump Bootloader to Specified Address.
#define    BL_GO_TO_ADDR			   0x55
//This Command is used to Mass Erase or Sector Erase of the User Flash .
#define    BL_FLASH_ERASE              0x56
//This Command is used to Write Data in to Different Memories of the MCU
#define    BL_MEM_WRITE		    	   0x57
//This Command is used to Enable or Disable Read/Write Protect on different Sectors of the User Flash .
#define    BL_EN_RW_PROTECT	    	   0x58
//This Command is used to Read Data from Different Memories of the MCU.
#define    BL_MEM_READ				   0x59
//This Command is used to read all the Sector Protection Status.
#define    BL_READ_SECTOR_P_STATUS     0x5A
//This Command is used to read the OTP contents.
#define    BL_OTP_READ				   0x5B
//This Command is used Disable all Sector Read/Write Protection
#define   BL_DIS_R_W_PROTECT		   0x5C

#ifdef __cplusplus
}
#endif

#endif /* __MAIN_H */
