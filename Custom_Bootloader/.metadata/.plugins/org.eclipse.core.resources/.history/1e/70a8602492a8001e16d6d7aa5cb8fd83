/* USER CODE BEGIN Header */
/**
 ******************************************************************************
 * @file           : main.c
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/


/* Private typedef -----------------------------------------------------------*/


/* Private define ------------------------------------------------------------*/


/* Private macro -------------------------------------------------------------*/


/* Private variables ---------------------------------------------------------*/
CRC_HandleTypeDef hcrc;

UART_HandleTypeDef huart2;

uint8_t Supported_Commands[] = {
		BL_GET_VER,
		BL_GET_HELP,
		BL_GET_CID,
		BL_GET_RDP_STATUS,
		BL_GO_TO_ADDR,
		BL_FLASH_ERASE,
		BL_MEM_WRITE,
		BL_READ_SECTOR_P_STATUS} ;

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_CRC_Init(void);
static void MX_USART2_UART_Init(void);
static void printmsg(char* format,...);

/* Private user code ---------------------------------------------------------*/

#define BL_RX_LEN  200
uint8_t Bl_RX_Buffer[BL_RX_LEN];


/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();

	/* Configure the system clock */
	SystemClock_Config();

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
	MX_CRC_Init();
	MX_USART2_UART_Init();

	if( HAL_GPIO_ReadPin(Button_Port , Button_Pin) == GPIO_PIN_SET )
	{
		// Debug message
		printmsg("[BL_DEBUG_MSG] Button is pressed .. going to BL mode\n\r");
		// Continue in Bootloader mode
		Bootloader_ReadData();
	}
	else
	{
		// Debug message
		printmsg("[BL_DEBUG_MSG] Button is not pressed .. Executing User App\n\r");
		// Bootloader jump to user app
		Bootloader_JumpTo_UserApp();
	}
}


void Bootloader_ReadData()
{
	uint8_t Rec_Len = 0;

	while(1)
	{
		// Reset Buffer to receive new data
		memset(Bl_RX_Buffer,0,BL_RX_LEN);

		// Receive First Byte -> Data To Follow Length
		HAL_UART_Receive(&huart2, &Bl_RX_Buffer[0], 1, HAL_MAX_DELAY);
		Rec_Len = Bl_RX_Buffer[0];

		// Receive Second Byte -> Command Byte
		HAL_UART_Receive(&huart2, &Bl_RX_Buffer[1], (uint16_t)Rec_Len, HAL_MAX_DELAY);

		switch( Bl_RX_Buffer[1] )
		{
		case BL_GET_VER:
			Bootloader_Handle_GetVer_Cmd(Bl_RX_Buffer);
			break;
		case BL_GET_HELP:
			Bootloader_Handle_GetHelp_Cmd(Bl_RX_Buffer);
			break;
		case BL_GET_CID:
			Bootloader_Handle_GetCid_Cmd(Bl_RX_Buffer);
			break;
		case BL_GET_RDP_STATUS:
			Bootloader_Handle_GetRdp_Cmd(Bl_RX_Buffer);
			break;
		case BL_GO_TO_ADDR:
			Bootloader_Handle_GoToAddr_Cmd(Bl_RX_Buffer);
			break;
		case BL_FLASH_ERASE:
			Bootloader_Handle_FlashErase_Cmd(Bl_RX_Buffer);
			break;
		case BL_MEM_WRITE:
			Bootloader_Handle_MemWrite_Cmd(Bl_RX_Buffer);
			break;
		case BL_EN_RW_PROTECT:
			Bootloader_Handle_EnRW_Protect_Cmd(Bl_RX_Buffer);
			break;
		case BL_MEM_READ:
			Bootloader_Handle_MemRead_Cmd(Bl_RX_Buffer);
			break;
		case BL_READ_SECTOR_P_STATUS:
			Bootloader_Handle_ReadSector_ProtectionStatus_Cmd(Bl_RX_Buffer);
			break;
		case BL_OTP_READ:
			Bootloader_Handle_ReadOtp_Cmd(Bl_RX_Buffer);
			break;
		case BL_DIS_R_W_PROTECT:
			Bootloader_Handle_DisRW_Protect_Cmd(Bl_RX_Buffer);
			break;
		default:
			printmsg("[BL_DEBUG_MSG] Invalid command code received from host \n");
			break;
		}
	}
}

void Bootloader_JumpTo_UserApp()
{
	// Function pointer to hold the address of the Reset Handler of the User App
	void(*pApp_ResetHandler)(void);

	printmsg("[BL_DEBUG_MSG] Bootloader_Jump_To_UserApp\n");

	// 1. Configure the MSP -> base address of Flash Sector 2
	uint32_t App_MSP = *(volatile uint32_t*)FLASH_SECTOR2_BASEADDR;

	printmsg("[BL_DEBUG_MSG] App_MSP value : %#x\n",App_MSP);

	__set_MSP(App_MSP);

	// 2. Fetch the Reset Handler Address of the UserApp -> FLASH_SECTOR2_BASE_ADDRESS + 4
	uint32_t App_ResetHandler_ADDr = *(volatile uint32_t*)(FLASH_SECTOR2_BASEADDR + 4);

	pApp_ResetHandler = (void*)App_ResetHandler_ADDr;

	printmsg("[BL_DEBUG_MSG] App Reset_Handler Addr : %#x\n",App_ResetHandler_ADDr);

	//3. Jump to Reset Handler of the UserApp
	pApp_ResetHandler();
}

/* Prints formated string to console over UART */
void printmsg(char* format,...)
{
#ifdef BL_DEBUG_MSG_EN
	char str[50];

	// Declaring pointer to the argument list
	va_list args;
	// Initializing argument to the list pointer
	va_start(args,format);
	// Send the formatted output to str using the argument list passed to it
	vsprintf(str,format,args);
	// Transmit data over UART
	HAL_UART_Transmit(&huart2, (uint8_t*)str,sizeof(str), HAL_MAX_DELAY);
	// Ending argument list traversal
	va_end(args);
#endif
}

/************************ Implementation of Bootloader Command Handle APIs ************************/

// Function That handles BL_GET_VER Command
void Bootloader_Handle_GetVer_Cmd(uint8_t *pBuffer)
{
	uint8_t BL_Version = 0;

	printmsg("[BL_DEBUG_MSG] Bootloader_Handle_GetVer_Cmd\n");

	// Total length of the Command Packet
	uint8_t CommandPacket_Len = pBuffer[0] + 1;
	// Packet Length without CRC
	uint8_t PayloadPacket_Len = CommandPacket_Len  - 4;
	// extract the CRC32 sent by the Host
	uint32_t Host_CRC = *( (uint32_t*)(pBuffer + PayloadPacket_Len) );

	// CRC Check
	if( Bootloader_VerifyCRC(pBuffer, PayloadPacket_Len, Host_CRC) )
	{
		printmsg("[BL_DEBUG_MSG] CRC Check Success !!\n");
		// Send ACK -> Notify Host that Command was received correctly
		Bootloader_Uart_SendACK(1);
		// Get Bootloader Version
		BL_Version = Bootloader_GetVer();

		printmsg("[BL_DEBUG_MSG] BL_VER : %d %#x\n",BL_Version,BL_Version);

		// Send Reply To Host
		Bootloader_Uart_SendReply(&BL_Version,1);
	}
	else
	{
		printmsg("[BL_DEBUG_MSG] CRC Check Failed !!\n");
		// Send NACK -> Notify Host that Command wasn't received correctly
		Bootloader_Uart_SendNACK();
	}
}

void Bootloader_Handle_GetHelp_Cmd(uint8_t *pBuffer)
{
	printmsg("[BL_DEBUG_MSG] Bootloader_Handle_GetHelp_Cmd\n");

	// Total length of the Command Packet
	uint8_t CommandPacket_Len = pBuffer[0] + 1;
	// Packet Length without CRC
	uint8_t PayloadPacket_Len = CommandPacket_Len  - 4;
	// extract the CRC32 sent by the Host
	uint32_t Host_CRC = *( (uint32_t*)(pBuffer + PayloadPacket_Len) );

	// CRC Check
	if( Bootloader_VerifyCRC(pBuffer, PayloadPacket_Len, Host_CRC) )
	{
		printmsg("[BL_DEBUG_MSG] CRC Check Success !!\n");
		// Send ACK -> Notify Host that Command was received correctly
		Bootloader_Uart_SendACK( sizeof(Supported_Commands) );
		// Send Reply To Host
		Bootloader_Uart_SendReply(Supported_Commands,sizeof(Supported_Commands));
	}
	else
	{
		printmsg("[BL_DEBUG_MSG] CRC Check Failed !!\n");
		// Send NACK -> Notify Host that Command wasn't received correctly
		Bootloader_Uart_SendNACK();
	}
}

void Bootloader_Handle_GetCid_Cmd(uint8_t *pBuffer)
{
	uint16_t BL_MCU_ChipID = 0;

	printmsg("[BL_DEBUG_MSG] Bootloader_Handle_GetCid_Cmd\n");

	// Total length of the Command Packet
	uint8_t CommandPacket_Len = pBuffer[0] + 1;
	// Packet Length without CRC
	uint8_t PayloadPacket_Len = CommandPacket_Len  - 4;
	// extract the CRC32 sent by the Host
	uint32_t Host_CRC = *( (uint32_t*)(pBuffer + PayloadPacket_Len) );

	// CRC Check
	if( Bootloader_VerifyCRC(pBuffer, PayloadPacket_Len, Host_CRC) )
	{
		printmsg("[BL_DEBUG_MSG] CRC Check Success !!\n");
		// Send ACK -> Notify Host that Command was received correctly
		Bootloader_Uart_SendACK(2);
		// Get MCU Chip Identification Number
		BL_MCU_ChipID = Bootloader_MCU_GetChipID();

		printmsg("[BL_DEBUG_MSG] CID : %d %#x\n",BL_MCU_ChipID,BL_MCU_ChipID);

		// Send Reply To Host
		Bootloader_Uart_SendReply( (uint8_t*)&BL_MCU_ChipID, 2 );
	}
	else
	{
		printmsg("[BL_DEBUG_MSG] CRC Check Failed !!\n");
		// Send NACK -> Notify Host that Command wasn't received correctly
		Bootloader_Uart_SendNACK();
	}
}

void Bootloader_Handle_GetRdp_Cmd(uint8_t *pBuffer)
{
	uint8_t BL_MCU_RdpLevel = 0;

	printmsg("[BL_DEBUG_MSG] Bootloader_Handle_GetRdp_Cmd\n");

	// Total length of the Command Packet
	uint8_t CommandPacket_Len = pBuffer[0] + 1;
	// Packet Length without CRC
	uint8_t PayloadPacket_Len = CommandPacket_Len  - 4;
	// extract the CRC32 sent by the Host
	uint32_t Host_CRC = *( (uint32_t*)(pBuffer + PayloadPacket_Len) );

	// CRC Check
	if( Bootloader_VerifyCRC(pBuffer, PayloadPacket_Len, Host_CRC) )
	{
		printmsg("[BL_DEBUG_MSG] CRC Check Success !!\n");
		// Send ACK -> Notify Host that Command was received correctly
		Bootloader_Uart_SendACK(1);
		// Get MCU Flash Protection Level
		BL_MCU_RdpLevel = Bootloader_MCU_GetFlash_RdpLevel();

		printmsg("[BL_DEBUG_MSG] RDP_STATUS : %d %#x\n",BL_MCU_RdpLevel,BL_MCU_RdpLevel);

		// Send Reply To Host
		Bootloader_Uart_SendReply(&BL_MCU_RdpLevel, 1);
	}
	else
	{
		printmsg("[BL_DEBUG_MSG] CRC Check Failed !!\n");
		// Send NACK -> Notify Host that Command wasn't received correctly
		Bootloader_Uart_SendNACK();
	}
}

void Bootloader_Handle_GoToAddr_Cmd(uint8_t *pBuffer)
{
	uint8_t Addr_InValid = ADDR_INVALID;
	uint8_t Addr_Valid = ADDR_VALID;
	uint32_t BL_GoTo_Addr = 0;

	printmsg("[BL_DEBUG_MSG] Bootloader_Handle_GoToAddr_Cmd\n");

	// Total length of the Command Packet
	uint8_t CommandPacket_Len = pBuffer[0] + 1;
	// Packet Length without CRC
	uint8_t PayloadPacket_Len = CommandPacket_Len  - 4;
	// extract the CRC32 sent by the Host
	uint32_t Host_CRC = *( (uint32_t*)(pBuffer + PayloadPacket_Len) );

	// CRC Check
	if( Bootloader_VerifyCRC(pBuffer, PayloadPacket_Len, Host_CRC) )
	{
		printmsg("[BL_DEBUG_MSG] CRC Check Success !!\n");
		// Send ACK -> Notify Host that Command was received correctly
		Bootloader_Uart_SendACK(1);

		// Extract the GoTo Address
		BL_GoTo_Addr = *(uint32_t*)( pBuffer + 2 );

		if( Bootloader_VerifyAddress(BL_GoTo_Addr) == ADDR_VALID )
		{
			// Notify host that Address is Valid
			Bootloader_Uart_SendReply(&Addr_Valid, 1);
			// Function pointer to hold the address of the GoTo Address
			void(*pJump_ToAddr)(void);
			// Assign address to that pointer (make T bit = 1) -> When PC sees first bit as 1 -> indicate THUMB2 instruction
			pJump_ToAddr= (void*)( BL_GoTo_Addr + 1 );

			printmsg("[BL_DEBUG_MSG] Jump to the GoTo Address !!\n");
			// Jump to Addr
			pJump_ToAddr();
		}
		else
		{
			printmsg("[BL_DEBUG_MSG] GoTo Address Invalid !!\n");
			// Notify host that Address is InValid
			Bootloader_Uart_SendReply(&Addr_InValid, 1);
		}
	}
	else
	{
		printmsg("[BL_DEBUG_MSG] CRC Check Failed !!\n");
		// Send NACK -> Notify Host that Command wasn't received correctly
		Bootloader_Uart_SendNACK();
	}
}

void Bootloader_Handle_FlashErase_Cmd(uint8_t *pBuffer)
{
	uint8_t BL_EraseStatus = 0;

	printmsg("[BL_DEBUG_MSG] Bootloader_Handle_FlashErase_Cmd\n");

	// Total length of the Command Packet
	uint8_t CommandPacket_Len = pBuffer[0] + 1;
	// Packet Length without CRC
	uint8_t PayloadPacket_Len = CommandPacket_Len  - 4;
	// extract the CRC32 sent by the Host
	uint32_t Host_CRC = *( (uint32_t*)(pBuffer + PayloadPacket_Len) );

	// CRC Check
	if( Bootloader_VerifyCRC(pBuffer, PayloadPacket_Len, Host_CRC) )
	{
		printmsg("[BL_DEBUG_MSG] CRC Check Success !!\n");
		// Send ACK -> Notify Host that Command was received correctly
		Bootloader_Uart_SendACK(1);
		printmsg("[BL_DEBUG_MSG] Initial_Sector: %d  No_OfSectors: %d  \n",pBuffer[2] , pBuffer[3]);
		// Get Flash Erase status
		HAL_GPIO_WritePin(LED_Port, LED_Pin,GPIO_PIN_SET);
		BL_EraseStatus = Bootloader_FlashErase(pBuffer[2] , pBuffer[3]);
		HAL_GPIO_WritePin(LED_Port, LED_Pin,GPIO_PIN_RESET);

		printmsg("[BL_DEBUG_MSG] Flash Erase Status : %#x\n",BL_EraseStatus);

		// Send Reply To Host
		Bootloader_Uart_SendReply(&BL_EraseStatus, 1);
	}
	else
	{
		printmsg("[BL_DEBUG_MSG] CRC Check Failed !!\n");
		// Send NACK -> Notify Host that Command wasn't received correctly
		Bootloader_Uart_SendNACK();
	}
}

void Bootloader_Handle_MemWrite_Cmd(uint8_t *pBuffer)
{

}

void Bootloader_Handle_EnRW_Protect_Cmd(uint8_t *pBuffer)
{

}

void Bootloader_Handle_MemRead_Cmd(uint8_t *pBuffer)
{

}

void Bootloader_Handle_ReadSector_ProtectionStatus_Cmd(uint8_t *pBuffer)
{

}

void Bootloader_Handle_ReadOtp_Cmd(uint8_t *pBuffer)
{

}

void Bootloader_Handle_DisRW_Protect_Cmd(uint8_t *pBuffer)
{

}


CRC_CheckStatus Bootloader_VerifyCRC(uint8_t *pData, uint32_t Len, uint32_t CRC_Host)
{
	uint32_t uwCRCValue=0xff;

	for (uint32_t i=0 ; i < Len ; i++)
	{
		uint32_t InData = pData[i];
		uwCRCValue = HAL_CRC_Accumulate(&hcrc, &InData, 1);
	}

	/* Reset CRC Calculation Unit */
	__HAL_CRC_DR_RESET(&hcrc);

	if( uwCRCValue == CRC_Host)
	{
		return VERIFY_CRC_SUCCESS;
	}

	return VERIFY_CRC_FAIL;
}

uint8_t Bootloader_GetVer()
{
	return (uint8_t)BL_VERSION;
}

uint16_t Bootloader_MCU_GetChipID()
{
	/* The STM32F4xx MCUs integrate an MCU ID code. This ID identifies the ST MCU partnumber
	and the die revision. It is part of the DBG_MCU component and is mapped on the
	external PPB bus (see Section 38.16 on page 1700). This code is accessible using the
	JTAG debug port (four to five pins) or the SW debug port (two pins) or by the user software.
	It is even accessible while the MCU is under system reset. */

	uint16_t CID;
	CID = (uint16_t)(DBGMCU->IDCODE) & 0x07FF;
	return  CID;

}

uint8_t Bootloader_MCU_GetFlash_RdpLevel()
{
	/* 0xAA:   Level 0, no protection
	   0xCC:   Level 2, chip protection (debug and boot from RAM features disabled)
	   Others: Level 1, read protection of memories (debug features limited) */

	uint8_t Rdp_Status=0;
#if 0
	FLASH_OBProgramInitTypeDef  ob_handle;
	HAL_FLASHEx_OBGetConfig(&ob_handle);
	Rdp_Status = (uint8_t)ob_handle.RDPLevel;
#else

	volatile uint32_t *pOB_addr = (uint32_t*) 0x1FFFC000;
	Rdp_Status =  (uint8_t)(*pOB_addr >> 8) ;
#endif

	return Rdp_Status;

}

Addr_CheckValid Bootloader_VerifyAddress(uint32_t GoTo_Addr)
{

	/* Can we jump to SRAM1   ? Yes
       Can we jump to SRAM2   ? Yes
	   Can we jump to BKPSRAM ? Yes
	   Can we jump to PERIPH  ? No  */

	if ( GoTo_Addr >= SRAM1_BASE && GoTo_Addr <= SRAM1_END)
	{
		return ADDR_VALID;
	}
	else if ( GoTo_Addr >= SRAM2_BASE && GoTo_Addr <= SRAM2_END)
	{
		return ADDR_VALID;
	}
	else if ( GoTo_Addr >= FLASH_BASE && GoTo_Addr <= FLASH_END)
	{
		return ADDR_VALID;
	}
	else if ( GoTo_Addr >= BKPSRAM_BASE && GoTo_Addr <= BKPSRAM_END)
	{
		return ADDR_VALID;
	}
	else
	{
		return ADDR_INVALID;
	}
}


uint8_t Bootloader_FlashErase(uint8_t Sector_Number , uint8_t Number_OfSectors)
{
	//we have totally 8 sectors in STM32F407 MCU .. sector[0 to 7]
	// if Sector_Number = 0xFF -> Mass Erase !

	FLASH_EraseInitTypeDef flashErase_handle;
	uint32_t SectorError;
	HAL_StatusTypeDef Status;

	if( Number_OfSectors > 8 )
		return INVALID_SECTOR;

	if( (Sector_Number == 0xFF ) || (Sector_Number <= 7) )
	{
		if( Sector_Number == (uint8_t) 0xFF )
		{
			flashErase_handle.TypeErase = FLASH_TYPEERASE_MASSERASE;
		}
		else
		{
			// How many Sectors needs to be erased
			uint8_t Remanining_Sectors = 8 - Sector_Number;

			if( Number_OfSectors > Remanining_Sectors)
			{
				Number_OfSectors = Remanining_Sectors;
			}

			flashErase_handle.TypeErase = FLASH_TYPEERASE_SECTORS;
			flashErase_handle.Sector = Sector_Number;
			flashErase_handle.NbSectors = Sector_Number;
		}
		flashErase_handle.Banks = FLASH_BANK_1;

		// Get access to touch the flash registers
		HAL_FLASH_Unlock();

		flashErase_handle.VoltageRange = FLASH_VOLTAGE_RANGE_3;
		Status = (uint8_t) HAL_FLASHEx_Erase(&flashErase_handle, &SectorError);

		HAL_FLASH_Lock();

		return Status;
	}

	return INVALID_SECTOR;
}

void Bootloader_Uart_SendACK(uint8_t Follow_DataLen)
{
	// Here we send 2 bytes.. first byte is ACK and the Second byte is Follow Len Value
	uint8_t ACK_Buf[2];
	ACK_Buf[0] = BL_ACK;
	ACK_Buf[1] = Follow_DataLen;

	HAL_UART_Transmit(&huart2,ACK_Buf,2,HAL_MAX_DELAY);
}

void Bootloader_Uart_SendNACK(void)
{
	uint8_t Nack = BL_NACK;
	HAL_UART_Transmit(&huart2,&Nack,1,HAL_MAX_DELAY);
}

void Bootloader_Uart_SendReply(uint8_t *pBuffer,uint32_t Len)
{
	// Transmit Data
	HAL_UART_Transmit(&huart2,pBuffer,Len,HAL_MAX_DELAY);
}



/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
	RCC_OscInitStruct.PLL.PLLM = 8;
	RCC_OscInitStruct.PLL.PLLN = 168;
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
	RCC_OscInitStruct.PLL.PLLQ = 7;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
	{
		Error_Handler();
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
	{
		Error_Handler();
	}
}

/**
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void)
{

	/* USER CODE BEGIN CRC_Init 0 */

	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
	if (HAL_CRC_Init(&hcrc) != HAL_OK)
	{
		Error_Handler();
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}

/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{

	/* USER CODE BEGIN USART2_Init 0 */

	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
	huart2.Init.BaudRate = 115200;
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
	huart2.Init.StopBits = UART_STOPBITS_1;
	huart2.Init.Parity = UART_PARITY_NONE;
	huart2.Init.Mode = UART_MODE_TX_RX;
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
	if (HAL_UART_Init(&huart2) != HAL_OK)
	{
		Error_Handler();
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}

/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
	GPIO_InitTypeDef GPIO_InitStruct = {0};

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
	__HAL_RCC_GPIOD_CLK_ENABLE();

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);

	/*Configure GPIO pin : PA0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

	/*Configure GPIO pin : PD12 */
	GPIO_InitStruct.Pin = GPIO_PIN_12;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
}




/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
	{
	}
	/* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
 * @brief  Reports the name of the source file and the source line number
 *         where the assert_param error has occurred.
 * @param  file: pointer to the source file name
 * @param  line: assert_param error line source number
 * @retval None
 */
void assert_failed(uint8_t *file, uint32_t line)
{
	/* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	/* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

